import { createSlice } from "@reduxjs/toolkit";

// Initial state of the todos
const initialState = {
  todos: localStorage.getItem("todos")
    ? JSON.parse(localStorage.getItem("todos"))
    : [], // Initialize todos from localStorage or empty array
};

// Create a slice for managing todos
const todoSlice = createSlice({
  name: "todo", // Slice name
  initialState, // Initial state
  reducers: {
    // Reducer to add a todo
    addTodo: (state, action) => {
      state.todos.push(action.payload); // Add a todo to the state
      localStorage.setItem("todos", JSON.stringify(state.todos)); // Update localStorage
    },
    // Reducer to mark a todo as done
    doneTodo: (state, action) => {
      state.todos = state.todos.map((todo) => {
        if (todo.id === action.payload) {
          return { ...todo, isDone: !todo.isDone }; // Toggle isDone status
        }
        return todo;
      });
      localStorage.setItem("todos", JSON.stringify(state.todos)); // Update localStorage
    },
    // Reducer to remove a todo
    removeTodo: (state, action) => {
      state.todos = state.todos.filter((todo) => todo.id !== action.payload); // Remove a todo from the state
      localStorage.setItem("todos", JSON.stringify(state.todos)); // Update localStorage
    },
  },
});

// Export actions generated by the slice
export const { addTodo, doneTodo, removeTodo } = todoSlice.actions;

// Export the reducer function
export default todoSlice.reducer;
